#!/bin/bash
#
# General config - set some sane defaults
#
# The editor that should be used to edit files
# If unset, the content of the EDITOR variable is used.
# If that is also unset, vim is used
CTI_EDITOR=/usr/bin/vim
#
# The tool to show conflicts. 
# If unset, diff is used. If that is not available,
# differences are not shown.
CTI_DIFFTOOL=/usr/bin/diff
CTI_DIFFOPTS="-s -N -u"
#
# The tool to resolve conflicts.
# If unset, vimdiff is used. If that is not available,
# merging is not suggested
CTI_MERGETOOL=/usr/bin/vimdiff
CTI_MERGEOPTS=""
#
# Target directory. 
CTI_HOME=/var/cti
#
# Ignore relative paths to the backup directory that match the 
# given pattern in checks for missing local files.
# The primary intention for this feature is to be able to 
# use version control systems (vcs) (e.g. git) in the backup directory
# without cti detecting the files created by the vcs as missing.
#BACKUP_DIR_IGNORE_PATTERN=^/\.git
#
# Delay in seconds between a printed message and opening the
# file in an editor
MSG_DELAY=1.0
#
# Read global config if present
[ -f /etc/ctirc ] && source /etc/ctirc
#
# Read user config if present
[ -f $HOME/.ctirc ] && source $HOME/.ctirc
#
# Include other files
BASEDIR=$(dirname $0)
source $BASEDIR/inc_msg.sh
#
# Check config file compatibility
[ -z "${BACKUP_DIR}" ] || abort "Setting BACKUP_DIR no longer available. Use CTI_HOME instead!"
#
# Check toolchain
which ${CTI_DIFFTOOL:=diff} > /dev/null 2>&1  || CTI_DIFFTOOL=no_diff
#
which ${CTI_MERGETOOL:=vimdiff} > /dev/null 2>&1 || CTI_MERGETOOL=no_merge
#
#
# Compute derived variable names
CTI_FILES_DIR=${CTI_HOME}/data/
CTI_SYMLINKS_DIR=${CTI_HOME}/symlinks/

function print_usage(){
cat << EOF
Usage: $(basename $0) [<OPTIONS>] <ACTION> <FILE> [<FILE> ... ]

$(basename $0) allows you to organize the backup of your config files.
It maintains a copy of the file hierarchy of your system with only those
files that are relevant. 

ACTIONs:
    add
        Start tracking the specified files

    check
        Only check the current status of the specified files

    check-all
        Recursively check all files in the backup. Does not expect 
        FILE argument(s)

    edit
        Edit the specifed files and start tracking them

    remove
        Remove specified files from the file system and the backup

    restore
        Restore specified files from the backup

    sync
        Same as check, but proposes actions for diverged files

    sync-all
        Recursively sync all files in the backup. Does not expect 
        FILE argument(s)

    untrack
        Remove specified files from the backup

Options:
    -a, --abort-on-conflict
        Always abort in case of conflict in conjunction with sync action.
        Conflicts with all other "*-on-conflict" flags.

    -b, --backup-on-conflict
        Always overwrite the backup with the current state of the file in
        case of conflict in conjunction with sync action.
        Conflicts with all other "*-on-conflict" flags.
    
    -d, --debug
        Enable debug mode.

    -h, --help
        Prints this help text.

    -i, --ignore-on-conflict
        Always ignore conflicts in conjunction with sync action.
        Conflicts with all other "*-on-conflict" flags.

    -n, --no-auto-add
        When a file is not currently tracked, do not start tracking it in 
        conjunction with action edit but only open it in the editor.
        This can be helpful to avoid accidentally editing files directly
        without cti, and can be used e.g. in combination with an alias similar
        to this:
        alias vi='${BASEDIR}/cti edit --no-auto-add'

    -r, --restore-on-conflict
        Always restore the backup and overwrite the current state in case
        of conflict in conjunction with sync action.
        Conflicts with all other "*-on-conflict" flags.

    -s, --suppress-synced
        Suppresses output of files in sync in conjunction with actions
        check and sync.

    -u, --untrack-on-conflict
        Always delete backup file (i.e. untrack file) in case of conflict
        in conjunction with sync action.
        Conflicts with all other "*-on-conflict" flags.

Configuration
    To modify the behavior of $(basename $0) see the config in the head of this
    script. The settings can be overridden by settings specified in /etc/ctirc.
    This in turn can be overridden in a user config file in \$HOME/.ctirc.
EOF
}

function no_diff () {
    print_error "No difftool available"
}

function no_merge () {
    print_error "No mergetool available"
    exit -1;
}

function checksum () {
    local file=$1
    if [ -z "$file" ] || [ ! -r "$file" ];then
        echo "0"
    elif [ -L "$file" ];then
        md5sum -- <(readlink $file) | cut -d' ' -f 1
    else
        md5sum -- $file | cut -d' ' -f 1
    fi
}

function get_backup_root () {
    local file=$1
    if [ -L ${file} ]; then
        echo ${CTI_SYMLINKS_DIR}
    else
        echo ${CTI_FILES_DIR}
    fi
}

function fullpath () {
    local file=$1
    if [ -d "$file" ];then
        cd -- $file
        pwd
    else
        local filename=$(basename -- "$file")
        local dir=${file%/*}
        [ -d "$dir" ] && cd "$dir"
        local path="$PWD"
        echo ${path}/${filename}
    fi
}

function backup_file () {
    local file=$1
    [ -d "$file" ] && return
    local path=$(fullpath $file)
    if [ -L ${file} ]; then
        local symlink_path=$(readlink ${file})
        local cwd="$PWD"
        cd $(dirname $path)
        check_file ${symlink_path} 0 "y"
        cd "$cwd"
        mkdir -p $(dirname $CTI_SYMLINKS_DIR/${path})
        echo $symlink_path > $CTI_SYMLINKS_DIR/${path}
        print_ok "Symlink $file (pointing to $symlink_path) synced with backup successfully!"
    else
        local temp_dir=$(mktemp -d)
        rsync -ptgolR -T $temp_dir -- $path $CTI_FILES_DIR/ && \
        rm -rf $temp_dir
        print_ok "File $file synced with backup successfully!"
    fi
}

function restore_file () {
    local file=$1
    [ -d "$file" ] && return
    local path=$(fullpath $file)
    if [ -f ${CTI_SYMLINKS_DIR}/$path ]; then
        local symlink_path=$(cat ${CTI_SYMLINKS_DIR}/$path)
        local cwd="$PWD"
        cd $(dirname $path)
        ln -i -s -- $symlink_path $(basename $path)
        check_file ${symlink_path} 0 "y"
        cd "$cwd"
    else
        local temp_dir=$(mktemp -d)
        rsync -ptgol -T $temp_dir -- $CTI_FILES_DIR/$path $path
        rm -rf -- $temp_dir
    fi
}

function check_backup_dir () {
    [ -z "$CTI_HOME" ] && abort "The CTI_HOME variable is not set!"
    [ "x$CTI_HOME" = "x/" ] && abort "The CTI_HOME variable is not valid!"
}

function clean_backup_dir () {
    [ $UID -eq 0 ] && find "$CTI_HOME" -type d -empty -delete
}

function untrack_file () {
    check_backup_dir
    local file=$1
    if [ -L $file ];then
        check_file $(readlink $file) 0 "y"
    fi
    rm -i -- $(get_backup_root $file)/$(fullpath ${file})
    clean_backup_dir
}

function remove_file () {
    local file=$1
    untrack_file $file
    rm -i -- ${file}
}

function handle_diverged_file () {
    local file_abs_path=$1
    local missing=$2
    local untracked=$3

    if [ "x$missing" == "xy" ];then
        echo "File is present in the backup but not locally!"
    elif [ "x$untracked" == "xy" ];then
        echo "File is not currently being tracked!"
    else
        echo "Changes:"
        if [ -L $file_abs_path ];then
            ${CTI_DIFFTOOL} ${CTI_DIFFOPTS} $CTI_SYMLINKS_DIR/$file_abs_path <(readlink $file_abs_path)
        else
            ${CTI_DIFFTOOL} ${CTI_DIFFOPTS} $CTI_FILES_DIR/$file_abs_path $file_abs_path
        fi
    fi
    echo ""
    local selection=0
    case $CONFLICT_RESOLUTION in 
        'abort')
            selection="Abort"
            ;;
        'backup')
            selection="Overwrite backup"
            ;;
        'ignore')
            selection="Ignore"
            ;;
        'restore')
            selection="Restore backup"
            ;;
        'untrack')
            selection="Untrack file"
            ;;
        *)
            echo "What do you want to do?"
            if [ "x$missing" == "xy" ];then
                select selection in {"Restore backup","Delete in backup","Ignore","Abort"}; do 
                    [ -z "$selection" ] || break
                    print_warning "Invalid choice!"
                done
            elif [ "x$untracked" == "xy" ];then
                select selection in {"Delete locally","Start tracking","Ignore","Abort"}; do
                    [ -z "$selection" ] || break
                    print_warning "Invalid choice!"
                done
            elif [ -L $file_abs_path ];then
                select selection in {"Restore backup","Overwrite backup","Untrack file","Ignore","Abort"}; do
                    [ -z "$selection" ] || break
                    print_warning "Invalid choice!"
                done
            else
                select selection in {"Open mergetool","Restore backup","Overwrite backup","Untrack file","Ignore","Abort"}; do
                    [ -z "$selection" ] || break
                    print_warning "Invalid choice!"
                done
            fi
            ;;
    esac

    case "$selection" in 
        'Open mergetool')
            ${CTI_MERGETOOL} ${CTI_MERGEOPTS} $file_abs_path $CTI_FILES_DIR/$file_abs_path
            ;;
        'Restore backup')
            restore_file $file_abs_path
            ;;
        'Untrack file'|'Delete in backup')
            untrack_file $file_abs_path
            ;;
        'Delete locally')
            rm -i -- $file_abs_path
            ;;
        'Overwrite backup'|'Start tracking')
            backup_file $file_abs_path
            ;;
        'Ignore')
            ;;
        'Abort')
            exit 0
            ;;
        *)
            abort "Invalid selection $selection"
            ;;
    esac
}

function check_file () {
    local file=$1
    local delay=${2:=0}
    local sync=${3:-y}
    local full_path=$(fullpath $file)
    local backup_root=$(get_backup_root $file)
    local path=$(echo $full_path | \
        sed -e s#^$CTI_FILES_DIR##  | \
        sed -e s#^$CTI_SYMLINKS_DIR##  | \
        sed -e 's#^\([^/]\)#/\1#g') # prepend slash if needed
    
    if [ ! -e $path ] && [ ! -e ${backup_root}/$path ]; then
        echo -e "[\e[1;33m??\e[m] NEW           $path"
        sleep $delay
        return
    elif [ -e $path ] && [ ! -e ${backup_root}/$path ]; then
        echo -e "[\e[1;33m??\e[m] UNTRACKED     $path"
        if [ "x$sync" == "xy" ]; then
            handle_diverged_file $path  "n" "y"
        else
            sleep $delay
        fi
        return
    elif [ ! -e $path ] && [ -e ${backup_root}/$path ]; then
        [ -n "$BACKUP_DIR_IGNORE_PATTERN" ] && [[ "$path" =~ $BACKUP_DIR_IGNORE_PATTERN ]] && return
        echo -e "[\e[1;31m!!\e[m] MISSING       $path"
        [ "x$sync" == "xy" ] && handle_diverged_file $path  "y" "n"
        return
    elif [ -e $path ] && [ -e ${backup_root}/$path ]; then
        [ -d $path ] && return
        [ -d ${backup_root}/$path ] && return

        local stored_checksum=$(checksum ${backup_root}/${path})
        local checksum_before=$(checksum ${path})
        if [ "$stored_checksum" != "$checksum_before" ];then
            echo -e "[\e[1;31m!!\e[m] OUT OF SYNC   $path"
            [ "x$sync" == "xy" ] && handle_diverged_file $path "n" "n"
        else
            if [ -L $path ];then
                check_file $(readlink $path) $delay $sync
            fi
            if [ "x$SUPPRESS_SYNCED" != "xy" ];then
                echo -e "[\033[00;32mOK\e[m] IN SYNC       $path"
                sleep $delay
            fi
        fi
    fi
}

function edit_file () {
    local file=$1
    local full_path=$(fullpath $file)
    local path=$(echo $full_path | \
        sed -e s#^$CTI_FILES_DIR##  | \
        sed -e s#^$CTI_SYMLINKS_DIR##  | \
        sed -e 's#^\([^/]\)#/\1#g') # prepend slash if needed
    if [ "x$NO_AUTO_ADD" == "xy" ] && [ ! -e ${CTI_FILES_DIR}/$path ]; then
        ${CTI_EDITOR:-${EDITOR:-vi}} $file
    else
        check_file $file $MSG_DELAY "y"
        checksum_before=$(checksum $file)
        ${CTI_EDITOR:-${EDITOR:-vi}} $file
        checksum_after=$(checksum $file)
        if [ "$checksum_before" != "$checksum_after" ]; then
            backup_file $file
        else
            echo "Not syncing file because no changes where made!"
        fi
    fi
}

function export_globals () {
    export CTI_EDITOR
    export CTI_DIFFTOOL
    export CTI_DIFFOPTS
    export CTI_MERGETOOL
    export CTI_MERGEOPTS
    export CTI_HOME
    export CTI_FILES_DIR
    export CTI_SYMLINKS_DIR
    [ -n "$BACKUP_DIR_IGNORE_PATTERN" ] && export BACKUP_DIR_IGNORE_PATTERN
    export MSG_DELAY
    export -f abort
    export -f print_ok
    export -f print_warning
    export -f print_error
    export -f print_usage
    export -f no_diff
    export -f no_merge
    export -f checksum
    export -f get_backup_root
    export -f fullpath
    export -f backup_file
    export -f restore_file
    export -f check_backup_dir
    export -f clean_backup_dir
    export -f untrack_file
    export -f remove_file
    export -f handle_diverged_file
    export -f check_file
    export -f edit_file
    export -f check_all
}

function check_all () {
    local sync=${1:="n"}
    check_backup_dir
    export_globals
    find $CTI_FILES_DIR -type f -readable -exec bash -c "check_file {} 0 $sync" \;  
    if [ $UID -ne 0 ];then
        local unreadable=$(find $CTI_FILES_DIR ! -readable | wc -l)
        [ $unreadable -gt 0 ] && print_warning "Some files or folders could not be read. You may want to re-run cti with higher privileges."
    fi
}

function set_conflict_resolution () {
    local resolution=$1
    if [ "x$CONFLICT_RESOLUTION" != "xmanual" ];then
        print_error "Invalid combination of command line flags! Only one automatic conflict resolution strategy can be set!"
        echo ""
        print_usage
        exit -1
    fi
    CONFLICT_RESOLUTION="$resolution"
}

########### READ COMMAND LINE ARGUMENTS ############

if [ "x$1" == "x-h" ] || [ "x$1" == "x--help" ];then
    print_usage
    exit 0
fi
export ACTION="none"
export FILES=""
export NO_OPTS="n"
export NO_AUTO_ADD="n"
export SUPPRESS_SYNCED="n"
export CONFLICT_RESOLUTION="manual"
while [ $# -gt 0 ];do
    if [ "x$NO_OPTS" == "xy" ] && [[ "$1" =~ \-.* ]];then
        FILES+="$1 "
    else
        case $1 in 
            '--')
                NO_OPTS="y"
                ;;
            'add'|'check'|'check-all'|'edit'|'remove'|'restore'|'sync'|'sync-all'|'untrack')
                if [ "x$ACTION" == "xnone" ];then
                    ACTION="$1"
                else 
                    FILES+="$1 "
                fi
                ;;
            '-a'|'--abort-on-conflict')
                set_conflict_resolution "abort"
                ;;
            '-b'|'--backup-on-conflict')
                set_conflict_resolution "backup"
                ;;
            '-d'|'--debug')
                set -xe
                ;;
            '-h'|'--help')
                print_usage
                exit 0
                ;;
            '-i'|'--ignore-on-conflict')
                set_conflict_resolution "ignore"
                ;;
            '-n'|'--no-auto-add')
                NO_AUTO_ADD="y"
                ;;
            '-r'|'--restore-on-conflict')
                set_conflict_resolution "restore"
                ;;
            '-s'|'--suppress-synced')
                SUPPRESS_SYNCED="y"
                ;;
            '-u'|'--untrack-on-conflict')
                set_conflict_resolution "untrack"
                ;;
            *)
                FILES+="$1 "
                ;;
        esac
    fi
    shift
done

########## CHECK BACKUP_DIR AND PERMISSIONS ##########

for BCK_DIR in {$CTI_FILES_DIR,$CTI_SYMLINKS_DIR}; do
    if [ ! -d "${BCK_DIR}" ]; then
        mkdir -p "${BCK_DIR}" || \
        abort "The backup directory ${BCK_DIR} does not yet exist. Backup at least one file as root to fix this"
    fi
done

if [ $UID -ne 0 ] && [ ! -w "${CTI_FILES_DIR}/${HOME}" ];then
    print_error "User $USER does not have a writable home directory in the backup folder"
    abort "Backup at least one file in this user's home dir as root to fix this"
fi

# Recover is the only action that does not expect further arguments
if [ "x$ACTION" == "xcheck-all" ];then
    check_all "n"
    exit 0
elif [ "x$ACTION" == "xsync-all" ];then
    check_all "y"
    exit 0
fi

if [ -z "$FILES" ]; then
    abort "Arguments missing!"
fi

############# CHECK COMMAND LINE ARGS ################

[ "x$ACTION" == "xnone" ] && abort "No valid action provided!"


############### MAIN SWITCH ##########################

for FILE in $FILES; do
    if [ ! -f "$FILE" ]; then
        print_warning "Ignoring non-existent file $FILE"
        continue
    fi
    case $ACTION in
        'add')
            if [ -f $CTI_FILES_DIR/$(fullpath $FILE) ]; then
                echo "File $FILE is already being tracked!"
            else
                backup_file $FILE
            fi
            ;;
        'check')
            check_file $FILE 0 "n"
            ;;
        'edit')
            edit_file $FILE
            ;;
        'remove')
            remove_file $FILE
            ;;
        'restore')
            restore_file $FILE
            ;;
        'sync')
            check_file $FILE 0 "y"
            ;;
        'untrack')
            untrack_file $FILE
            ;;
        *)
            abort "Unrecognized action $ACTION"
            ;;
    esac
done
