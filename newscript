#!/bin/bash
set -euo pipefail
BASEDIR=$(dirname $0)
source ${BASEDIR}/inc_msg.sh
function print_usage() {
cat << EOF
Usage: $(basename $0) [OPTIONS] [list of filenames for new scripts]
Valid options are:
    -a
        Adds abort function
    -b 
        Initialize edrtools BASEDIR variable
    -d
        Include dependency checking functions
    -l
        Include lock file mechanism functions
    -m
        Include message printing functions
    -o
        Adds options parser
    -p
        Adds print_usage function
EOF
}

if [ "$1" == "-h" ];then
    print_usage
    exit 0
fi

INC_ABORT="n"
INC_BASEDIR="n"
INC_DEPENDENCIES="n"
INC_LOCK="n"
INC_MSG="n"
INC_OPT_PARSER="n"
INC_PRINT_USAGE="n"

while [ $# -gt 0 ];do
    case "${1}" in
        '-a')
            INC_ABORT="y"
            shift
            continue
            ;;
        '-b')
            INC_BASEDIR="y"
            shift
            continue
            ;;
        '-d')
            INC_DEPENDENCIES="y"
            shift
            continue
            ;;
        '-l')
            INC_LOCK="y"
            shift
            continue
            ;;
        '-m')
            INC_MSG="y"
            shift
            continue
            ;;
        '-o')
            INC_OPT_PARSER="y"
            shift
            continue
            ;;
        '-p')
            INC_PRINT_USAGE="y"
            shift
            continue
            ;;
    esac
    NEWSCRIPT=$1
    [ -z ${NEWSCRIPT} ] && exit
    if [ ! -f ${NEWSCRIPT} ];then
        echo '#!/bin/bash' > ${NEWSCRIPT}
        echo 'set -euo pipefail' >> ${NEWSCRIPT}
        [ "${INC_BASEDIR}" == "y" ] && echo "BASEDIR=\$(dirname \$0)" >> ${NEWSCRIPT}
        [ "${INC_DEPENDENCIES}" == "y" ] && echo "source \$BASEDIR/inc_dependencies.sh" >> ${NEWSCRIPT}
        [ "${INC_LOCK}" == "y" ] && echo "source \$BASEDIR/inc_lock.sh" >> ${NEWSCRIPT}
        [ "${INC_MSG}" == "y" ] && echo "source \$BASEDIR/inc_msg.sh" >> ${NEWSCRIPT}
        if [ "${INC_PRINT_USAGE}" == "y" ]; then
		    cat >> ${NEWSCRIPT} << "OEOF"
function print_usage(){
    cat << EOF
OEOF
            if [ "$INC_OPT_PARSER" == "y" ]; then
                cat >> ${NEWSCRIPT} << "OEOF"
Usage: $(basename $0) [OPTIONS]

Options:
    --:
        Stop processing any further options

    -d,--debug:
        Run script in debugging mode

    -h,--help:
        Print this help
OEOF
            else
                echo 'Usage: $(basename $0)' >> ${NEWSCRIPT}
            fi
            echo "EOF" >> ${NEWSCRIPT}
            echo "}" >> ${NEWSCRIPT}
        fi
        if [ "${INC_ABORT}" == "y" ]; then
            echo "function abort(){" >> ${NEWSCRIPT}
            echo '    echo "Error: $@" >&2' >> ${NEWSCRIPT}
            [ "${INC_PRINT_USAGE}" == "y" ] && echo "    print_usage" >> ${NEWSCRIPT}
            echo "    exit 1" >> ${NEWSCRIPT}
            echo "}" >> ${NEWSCRIPT}
        fi
            if [ "${INC_PRINT_USAGE}" == "y" ]; then
                cat >> ${NEWSCRIPT} << "OEOF"
if [ "${1}" == "-h" ] || [ "${1}" == "--help" ];then
    print_usage
    exit 0
fi
OEOF
        fi
        if [ "${INC_OPT_PARSER}" == "y" ]; then
            cat >> "${NEWSCRIPT}" << "OEOF"
args=()
no_opts="n"
while [ $# -gt 0 ];do
    if [ "${no_opts}" == "y" ] && [[ "${1}" =~ \-.* ]];then
        args+="${1} "
    else
        case ${1} in
            '--')
                no_opts="y"
                ;;
            '-d'|'--debug')
                set -xe
                ;;
            '-h'|'--help')
                print_usage
                exit 0
                ;;
            *)
                args+=("${1}")
                ;;
        esac
    fi
    shift
done
OEOF
        fi
        chmod +x ${NEWSCRIPT}
    fi
    ${EDITOR:-vi} ${NEWSCRIPT}
    shift
done
